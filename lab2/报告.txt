代码优化部分：
1。改变动归的第二重循环j起始的


# changes for branch 2




1.代码风格：
对代码风格的维护过程中我有如下的体会：
（1）利用代码风格检测工具可以很方便规范代码格式，比如运算符号后的空格等格式可以很好的提高代码可读性。
（2）使用pylint等软件不仅可以优化代码风格，还可以发现潜在的错误和安全隐患，比如错误信息“use of eval”就检测出eval函数不对输入信息是否合法的监测。
（3）在代码风格检测工具pylint的使用，我们先后使用了Pythonxy自带pylint，Pycharm自带pylint和使用pip下载安装的原装pylint工具。三者的比较如下：
	a.Pythonxy自带pylint：
		某些情况下会产生“Trailing Whitespace”的误报信息
	b.Pycharm自带pylint：
		Pycharm并不是完全遵循Python的代码规范，但是由于集成在编辑器中它的图形化界面做的比较好，而且提示信息比较全面，调整的时候比较方便，适合开始的时候第一遍初步修改
	c.pip下载安装的原装pylint工具：
		可以使用自带的pylint-gui来分析代码，图形化界面同样比较易用，完全遵守代码规范
（4）但是一味的遵循代码规则并不总是好的，比如规则中认为顶格定义的变量为常量，必须全部大写，反而降低了可读性
（5）代码应该做好封装，使用函数和类易于后期维护和更改，因为基本不会出现因为小问题改变全局代码的情况

2.效率维护：
（1）本次实验调整的代码采用了动态规划的算法，对于本次实验来说是采用了比较优的算法，采用较优的算法来优化是一个不错的思路
（2）我们主要在两个方面对时间间进行了优化：
	a.通过筛选降低处理的数据量；
	b.优化算法本身；
	可以想到这是两个基本的提高算法时间效率的思路。